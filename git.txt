$ mkdir learngit
$ cd learngit
$ git init
$ git add readme.txt
$ git commit -m "wrote a readme file"
$ git status  /$ git diff？
$ git log   推出 q
commit 9e845ca82219f974f46149db1f27f0f8e9da47d3 (HEAD -> master)
Author: Qing <coohohye@gmail.com>
Date:   Sun Apr 15 16:08:07 2018 -0400

    add more
首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：

$ git reset --hard？ HEAD^
HEAD is now at ea34578 add distributed
$ git reset --hard 3628164？ 版本号

Git提供了一个命令git reflog用来记录你的每一次命令：
$ git reflog
ea34578 HEAD@{0}: reset: moving to HEAD^
3628164 HEAD@{1}: commit: append GPL

用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。？

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	
$ rm test.txt
git rm用于删除一个文件
$ git remote add origin git@github.com:jackstom/learngit.git
$ git push -u origin master

$ git checkout -b dev
$ git branch dev
$ git checkout dev
Switched to branch 'dev'
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

多人协作时，大家都会往master和dev分支上推送各自的修改。

